import os
import requests
import json

# URL till din GraphQL endpoint
url = "https://scottsberry.centra.com/graphql"  # Ändra detta till din faktiska endpoint

# Hämta API-nyckeln från miljövariabler
API_KEY = os.environ.get('API_KEY')

if not API_KEY:
    raise EnvironmentError("API_KEY är inte satt i miljövariablerna.")

# Uppdaterad GraphQL query med rätt typer för variabler
query = """
query ($from: DateTimeTz!, $to: DateTimeTz!, $limit: Int!, $page: Int!) {
  orders(
    where: {
      createdAt: {
        from: $from,
        to: $to
      }
    },
    limit: $limit,
    page: $page
  ) {
    createdAt
  }
}
"""

# Funktion för att hämta en specifik sida
def fetch_orders(page):
    variables = {
        "from": "2024-05-01T00:00:00Z",
        "to": "2024-05-31T23:59:59Z",
        "limit": 100,
        "page": page
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}"  # Justera detta beroende på din API:s autentiseringsmetod
    }

    response = requests.post(
        url,
        json={"query": query, "variables": variables},
        headers=headers
    )

    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Query misslyckades med statuskod {response.status_code}: {response.text}")

# Funktion för att hämta flera sidor dynamiskt
def fetch_multiple_pages(total_pages):
    all_orders = []

    for page in range(1, total_pages + 1):
        try:
            result = fetch_orders(page)
            orders = result['data']['orders']
            print(f"Sida {page}: {len(orders)} orders")
            all_orders.extend(orders)
            for order in orders:
                print(order['createdAt'])
        except Exception as e:
            print(f"Fel vid hämtning av sida {page}: {e}")

    print(f"Totalt hämtade orders: {len(all_orders)}")
    return all_orders

if __name__ == "__main__":
    # Hämta de första två sidorna
    total_pages = 4
    all_orders = fetch_multiple_pages(total_pages)
